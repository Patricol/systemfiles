#!/usr/bin/env bash

main() {
	# Check for new versions here: https://github.com/eclipse/che/releases

	# Currently major breaking bugs in 6.16.0-6.17.1; should check if newer versions work properly.
	declare use_as_new="$1"
	if [[ -z "${use_as_new}" ]]; then
		use_as_new="6.15.0"
		#use_as_new="latest"
		#use_as_new="rc"
		#use_as_new="nightly"
	fi

	get_current_version() {
		local image_name current_version_from_docker current_version_from_file
		image_name="$(docker ps -f "name=che" --format "{{.Image}}")"
		current_version_from_docker="$(cut -d ":" -f 2 <<< "${image_name}")"
		current_version_from_file="$(cat /home/docker/che/instance/che.ver.do_not_modify)"
		if [[ -n "${current_version_from_docker}" ]]; then
			echo "${current_version_from_docker}"
		else
			# Works when configs are present even if no images are downloaded currently; as is true in the middle of the clean-docker script.
			echo "${current_version_from_file}"
		fi
	}

	cli_general() {
		docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /home/docker/che:/data eclipse/che-cli:$@
	}

	cli_current() {
		cli_general "$(get_current_version)" $@
	}

	cli_new() {
		cli_general "${use_as_new}" $@
	}

	cli_current stop
	docker pull eclipse/che-cli:"${use_as_new}"
	cli_new upgrade
	# Need to restart here; if che was already up to date, then it will still be stopped after the upgrade command.
	cli_new restart
}	# Don't unset functions; they're used in another script.

main
