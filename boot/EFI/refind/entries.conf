# Which types of boot loaders to search, and in what order to display them:
#  internal      - internal EFI disk-based boot loaders
#  external      - external EFI disk-based boot loaders
#  optical       - EFI optical discs (CD, DVD, etc.)
#  netboot       - EFI network (PXE) boot options
#  hdbios        - BIOS disk-based boot loaders
#  biosexternal  - BIOS external boot loaders (USB, eSATA, etc.)
#  cd            - BIOS optical-disc boot loaders
#  manual        - use stanzas later in this configuration file
# Note that the legacy BIOS options require firmware support, which is not present on all computers. The netboot option is experimental and relies on the ipxe.efi and ipxe_discover.efi program files.
# On UEFI PCs, default is internal,external,optical,manual
# On Macs, default is internal,hdbios,external,biosexternal,optical,cd,manual
scanfor internal,external,optical,manual

# When scanning volumes for EFI boot loaders, rEFInd always looks for macOS's and Microsoft Windows' boot loaders in their normal locations, and scans the root directory and every subdirectory of the /EFI directory for additional boot loaders, but it doesn't recurse into these directories. The also_scan_dirs token adds more directories to the scan list. Directories are specified relative to the volume's root directory. This option applies to ALL the volumes that rEFInd scans UNLESS you include a volume name and colon before the directory name, as in "myvol:/somedir" to scan the somedir directory only on the filesystem named myvol. If a specified directory doesn't exist, it's ignored (no error condition results). The default is to scan the "boot" directory in addition to various hard-coded directories.
#also_scan_dirs boot,ESP2:EFI/linux/kernels

# Partitions (or whole disks, for legacy-mode boots) to omit from scans. For EFI-mode scans, you normally specify a volume by its label, which you can obtain in an EFI shell by typing "vol", from Linux by typing "blkid /dev/{devicename}", or by examining the disk's label in various OSes' file browsers. It's also possible to identify a partition by its unique GUID (aka its "PARTUUID" in Linux parlance). (Note that this is NOT the partition TYPE CODE GUID.) This identifier can be obtained via "blkid" in Linux or "diskutil info {partition-id}" in macOS. For legacy-mode scans, you can specify any subset of the boot loader description shown when you highlight the option in rEFInd.
# The default is "LRS_ESP".
#dont_scan_volumes "Recovery HD"

# Directories that should NOT be scanned for boot loaders. By default, rEFInd doesn't scan its own directory, the EFI/tools directory, the EFI/memtest directory, the EFI/memtest86 directory, or the com.apple.recovery.boot directory. Using the dont_scan_dirs option enables you to "blacklist" other directories; but be sure to use "+" as the first element if you want to continue blacklisting existing directories. You might use this token to keep EFI/boot/bootx64.efi out of the menu if that's a duplicate of another boot loader or to exclude a directory that holds drivers or non-bootloader utilities provided by a hardware manufacturer. If a directory is listed both here and in also_scan_dirs, dont_scan_dirs takes precedence. Note that this blacklist applies to ALL the filesystems that rEFInd scans, not just the ESP, unless you precede the directory name by a filesystem name or partition unique GUID, as in "myvol:EFI/somedir" to exclude EFI/somedir from the scan on the myvol volume but not on other volumes.
#dont_scan_dirs ESP:/EFI/boot,EFI/Dell,EFI/memtest86

# Files that should NOT be included as EFI boot loaders (on the first line of the display). If you're using a boot loader that relies on support programs or drivers that are installed alongside the main binary or if you want to "blacklist" certain loaders by name rather than location, use this option. Note that this will NOT prevent certain binaries from showing up in the second-row set of tools. Most notably, various Secure Boot and recovery tools are present in this list, but may appear as second-row items.
# The file may be specified as a bare name (e.g., "notme.efi"), as a complete pathname (e.g., "/EFI/somedir/notme.efi"), or as a complete pathname with volume (e.g., "SOMEDISK:/EFI/somedir/notme.efi" or 2C17D5ED-850D-4F76-BA31-47A561740082:/EFI/somedir/notme.efi"). OS tags hidden via the Delete or '-' key in the rEFInd menu are added to this list, but stored in NVRAM.
# The default is shim.efi,shim-fedora.efi,shimx64.efi,PreLoader.efi,TextMode.efi,ebounce.efi,GraphicsConsole.efi,MokManager.efi,HashTool.efi,HashTool-signed.efi,bootmgr.efi,fb{arch}.efi (where "{arch}" is the architecture code, like "x64").
#dont_scan_files shim.efi,MokManager.efi

# Scan for Linux kernels that lack a ".efi" filename extension. This is useful for better integration with Linux distributions that provide kernels with EFI stub loaders but that don't give those kernels filenames that end in ".efi", particularly if the kernels are stored on a filesystem that the EFI can read. When set to "1", "true", or "on", this option causes all files in scanned directories with names that begin with "vmlinuz" or "bzImage" to be included as loaders, even if they lack ".efi" extensions. Passing this option a "0", "false", or "off" value causes kernels without ".efi" extensions to NOT be scanned.
# Default is "true" -- to scan for kernels without ".efi" extensions.
#scan_all_linux_kernels false

# Combine all Linux kernels in a given directory into a single entry. When so set, the kernel with the most recent time stamp will be launched by default, and its filename will appear in the entry's description. To launch other kernels, the user must press F2 or Insert; alternate kernels then appear as options on the sub-menu.
# Default is "true" -- kernels are "folded" into a single menu entry.
fold_linux_kernels false

# Comma-delimited list of strings to treat as if they were numbers for the purpose of kernel version number detection. These strings are matched on a first-found basis; that is, if you want to treat both "linux-lts" and "linux" as version strings, they MUST be specified as "linux-lts,linux", since if you specify it the other way, both vmlinuz-linux and vmlinuz-linux-lts will return with "linux" as the "version string," which is not what you'd want. Also, if the kernel or initrd file includes both a specified string and digits, the "version string" includes both. For instance, "vmlinuz-linux-4.8" would yield a version string of "linux-4.8". This option is intended for Arch and other distributions that don't include version numbers in their kernel filenames, but may provide other uniquely identifying strings for multiple kernels. If this feature causes problems (say, if your kernel filename includes "linux" but the initrd filename doesn't), be sure this is set to an empty string (extra_kernel_version_strings "") or comment out the option to disable it.
# Default is no extra version strings.
extra_kernel_version_strings linux-lts,linux

# Sample manual configuration stanzas. Each begins with the "menuentry" keyword followed by a name that's to appear in the menu (use quotes if you want the name to contain a space) and an open curly brace ("{"). Each entry ends with a close curly brace ("}"). Common keywords within each stanza include:
#  volume    - identifies the filesystem from which subsequent files are loaded. You can specify the volume by filesystem label, by partition label, or by partition GUID number (but NOT yet by filesystem UUID number).
#  loader    - identifies the boot loader file
#  initrd    - Specifies an initial RAM disk file
#  icon      - specifies a custom boot loader icon
#  ostype    - OS type code to determine boot options available by pressing Insert. Valid values are "MacOS", "Linux", "Windows", and "XOM". Case-sensitive.
#  graphics  - set to "on" to enable graphics-mode boot (useful mainly for MacOS) or "off" for text-mode boot. Default is auto-detected from loader filename.
#  options   - sets options to be passed to the boot loader; use quotes if more than one option should be passed or if any options use characters that might be changed by rEFInd parsing procedures (=, /, #, or tab).
#  disabled  - use alone or set to "yes" to disable this entry.
# Note that you can use either DOS/Windows/EFI-style backslashes (\) or Unix-style forward slashes (/) as directory separators. Either way, all file references are on the ESP from which rEFInd was launched.
# Use of quotes around parameters causes them to be interpreted as one keyword, and for parsing of special characters (spaces, =, /, and #) to be disabled. This is useful mainly with the "options" keyword. Use of quotes around parameters that specify filenames is permissible, but you must then use backslashes instead of slashes, except when you must pass a forward slash to the loader, as when passing a root= option to a Linux kernel.

# Below are several sample boot stanzas. All are disabled by default. Find one similar to what you need, copy it, remove the "disabled" line, and adjust the entries to suit your needs.

# A sample entry for a Linux 3.13 kernel with EFI boot stub support on a partition with a GUID of 904404F8-B481-440C-A1E3-11A5A954E601. This entry includes Linux-specific boot options and specification of an initial RAM disk. Note uses of Linux-style forward slashes. Also note that a leading slash is optional in file specifications.
#menuentry Linux {
#    icon EFI/refind/icons/os_linux.png
#    volume 904404F8-B481-440C-A1E3-11A5A954E601
#    loader bzImage-3.3.0-rc7
#    initrd initrd-3.3.0.img
#    options "ro root=UUID=5f96cafa-e0a7-4057-b18f-fa709db5b837"
#    disabled
#}

# Below is a more complex Linux example, specifically for Arch Linux. This example MUST be modified for your specific installation; if nothing else, the PARTUUID code must be changed for your disk. Because Arch Linux does not include version numbers in its kernel and initrd filenames, you may need to use manual boot stanzas when using fallback initrds or multiple kernels with Arch. This example is modified from one in the Arch wiki page on rEFInd (https://wiki.archlinux.org/index.php/rEFInd).
#menuentry "Arch Linux" {
#    icon     /EFI/refind/icons/os_arch.png
#    volume   "Arch Linux"
#    loader   /boot/vmlinuz-linux
#    initrd   /boot/initramfs-linux.img
#    options  "root=PARTUUID=5028fa50-0079-4c40-b240-abfaf28693ea rw add_efi_memmap"
#    submenuentry "Boot using fallback initramfs" {
#        initrd /boot/initramfs-linux-fallback.img
#    }
#    submenuentry "Boot to terminal" {
#        add_options "systemd.unit=multi-user.target"
#    }
#    disabled
#}

# A sample entry for loading Ubuntu using its standard name for its GRUB 2 boot loader. Note uses of Linux-style forward slashes.
#menuentry Ubuntu {
#    loader /EFI/ubuntu/grubx64.efi
#    icon /EFI/refind/icons/os_linux.png
#    disabled
#}

# A minimal ELILO entry, which probably offers nothing that auto-detection can't accomplish.
#menuentry "ELILO" {
#    loader \EFI\elilo\elilo.efi
#    disabled
#}

# Like the ELILO entry, this one offers nothing that auto-detection can't do; but you might use it if you want to disable auto-detection but still boot Windows....
#menuentry "Windows 7" {
#    loader \EFI\Microsoft\Boot\bootmgfw.efi
#    disabled
#}

# EFI shells are programs just like boot loaders, and can be launched in the same way. You can pass a shell the name of a script that it's to run on the "options" line. The script could initialize hardware and then launch an OS, or it could do something entirely different.
#menuentry "Windows via shell script" {
#    icon \EFI\refind\icons\os_win.png
#    loader \EFI\tools\shell.efi
#    options "fs0:\EFI\tools\launch_windows.nsh"
#    disabled
#}

# Mac OS is normally detected and run automatically; however, if you want to do something unusual, a manual boot stanza may be the way to do it. This one does nothing very unusual, but it may serve as a starting point. Note that you'll almost certainly need to change the "volume" line for this example to work.
#menuentry "My macOS" {
#    icon \EFI\refind\icons\os_mac.png
#    volume "macOS boot"
#    loader \System\Library\CoreServices\boot.efi
#    disabled
#}

menuentry "Arch Linux" {
    icon     EFI/refind/theme/icons/192_72/os_arch.png
    volume   "EFI"
    loader   vmlinuz-linux
    initrd   initramfs-linux.img
    options  "root=LABEL=ArchLinux rw"
    submenuentry "TTY" {
        add_options "systemd.unit=multi-user.target"
    }
    submenuentry "LTS" {
        loader vmlinuz-linux-lts
        initrd   initramfs-linux-lts.img
    }
    submenuentry "LTS TTY" {
        loader vmlinuz-linux-lts
        initrd   initramfs-linux-lts.img
        add_options "systemd.unit=multi-user.target"
    }
    submenuentry "Fallback" {
        initrd initramfs-linux-fallback.img
    }
    submenuentry "Fallback TTY" {
        initrd initramfs-linux-fallback.img
        add_options "systemd.unit=multi-user.target"
    }
    submenuentry "Fallback LTS" {
        loader vmlinuz-linux-lts
        initrd   initramfs-linux-lts-fallback.img
    }
    submenuentry "Fallback LTS TTY" {
        loader vmlinuz-linux-lts
        initrd   initramfs-linux-lts-fallback.img
        add_options "systemd.unit=multi-user.target"
    }
}
