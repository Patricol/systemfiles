#!/usr/bin/env bash

# source this file to handle arguments within other scripts.
# source "$(which argue)"

# some parts adapted from https://stackoverflow.com/a/29754866/4710015



# given pairs of short and long names for options, (requires only one), and extra data about whether it takes arguments and whether those arguments are optional.
# sets environment variables with provided value or "true" if bool. otherwise sets false bools to empty string etc.; same for non-present opts with args.

# be careful about what variable names are used; they might overwrite ones from the scope this is sourced from. also make sure to unset them.

# no need to handle command line args in this; just use an array that should be defined in the scope that sources this.
# argue_options=("f,foo,arg" "b,bar,noarg" "z,baz,optarg")

# modify this to take an additional arg which is the name of the variable. the longname defaults to that variable name unless given. makes things more flexible

__argue_basic_setup() {
    
    if getopt --test > /dev/null; then
        echo "Can't argue; getopt is not enhanced." >&2
        return 8
    fi

    local -A valid_types
    valid_types=( ["noarg"]="" ["arg"]=":" ["optarg"]="::" ) # ORDER IS SIGNIFICANT; CHECK CODE BELOW
    # Each short option character in shortopts or long option name in longopts may be followed by one colon to indicate it has a required argument, and by two colons to indicate it has an optional argument.

    check_valid_option(){
        declare option="$@"
        local regex_string
        regex_string='^[0-9a-zA-Z_]?,[a-zA-Z_][0-9a-zA-Z_]*,(no|opt)?arg$'
        if ! echo "${option}" | grep -E "${regex_string}" > /dev/null; then
            echo "Error: '${option}' does not match required format '${regex_string}'." >&2
            return 1
        fi
    }
    
    local option
    for option in "${argue_options[@]}"; do
        if ! check_valid_option ${option}; then
            return $?
        fi
        local option_parts option_colons longopt shortopt type > /dev/null # avoid zsh printing
        if [[ "${SHELL}" == *"/zsh" ]]; then
            IFS=',' read -r -A option_parts <<< "${option}"
            shortopt="${option_parts[1]}"
            longopt="${option_parts[2]}"
            type="${option_parts[3]}"
        else
            IFS=',' read -r -a option_parts <<< "${option}"
            shortopt="${option_parts[0]}"
            longopt="${option_parts[1]}"
            type="${option_parts[2]}"
        fi
        
        option_colons="${valid_types[${type}]}"
        
        # check no duplicate short or long option names. (can have same short and long; -a and --a are different.)
        if [[ -n "${shortopt}" ]]; then
            if [[ -z "${__argue_shortopts_to_long[${shortopt}]}" ]]; then
                __argue_shortopts_to_long[${shortopt}]="${longopt}"
                __argue_shortopts+="${shortopt}${option_colons}"
            else
                echo "Duplicate shortopts" >&2
                return 3
            fi
        fi
        if [[ -z "${__argue_longopts_to_type[${longopt}]}" ]]; then
        	__argue_longopts_to_type[${longopt}]="${type}"
        	__argue_longopts+="${longopt}${option_colons},"
        else
        	echo "Duplicate longopts" >&2
        	return 3
        fi
    done
    __argue_longopts="${__argue_longopts%,}"

    unset -f check_valid_option
}


declare -A __argue_shortopts_to_long
declare -A __argue_longopts_to_type
declare __argue_shortopts="" __argue_longopts=""

if ! __argue_basic_setup; then
    return $?
fi
unset -f __argue_basic_setup

# temporarily store output to be able to check for errors
# activate quoting/enhanced mode (e.g. by writing out "--options")
# pass arguments only via   -- "$@"   to separate them correctly
declare __argue_parsed_options
__argue_parsed_options=$(getopt --options=${__argue_shortopts} --longoptions=${__argue_longopts} --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then # getopt has complained about wrong arguments to stdout
    return $?
fi
unset __argue_shortopts __argue_longopts

declare __argue_longopt
for __argue_longopt in ${__argue_longopts_to_type[@]}; do
    unset "${__argue_longopt}" # unsetting instead of setting to empty avoids zsh printing later. (e.g. in zsh "local abc; local abc" prints "abc=''")
    declare "${__argue_longopt}"=""
done
unset __argue_longopt

# read getopt's output this way to handle the quoting right:
eval set -- ${__argue_parsed_options}
unset __argue_parsed_options


# echo "$@"

while [[ "$1" != "--" ]]; do
    declare __argue_longopt > /dev/null # avoid zsh printing
    if [[ ${#1} -eq 2 ]]; then
        __argue_longopt="${__argue_shortopts_to_long[${1:1}]}"
    else
        __argue_longopt="${1:2}"
    fi
    shift
    case "${__argue_longopts_to_type[${__argue_longopt}]}" in
        arg|optarg)
            declare "${__argue_longopt}"="$1"
            # echo "${__argue_longopt}=$1"
            shift
            ;;
        *)
            declare "${__argue_longopt}"="true"
            # echo "${__argue_longopt}=true"
            ;;
    esac
done
unset __argue_longopt
shift

unset __argue_shortopts_to_long __argue_longopts_to_type

